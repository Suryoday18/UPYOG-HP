package org.jamabandi;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.5.3
 * 2022-09-16T13:35:07.690+05:30
 * Generated source version: 3.5.3
 *
 */

//http://09/lrdataservice/lrdataservice.asmx?wsdl
@WebServiceClient(name = "LRDataService",
                  wsdlLocation = "http://164.100.137.207/lrdataservice/lrdataservice.asmx?wsdl",
                  targetNamespace = "http://jamabandi.org/")
public class LRDataService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://jamabandi.org/", "LRDataService");
    public final static QName LRDataServiceSoap12 = new QName("http://jamabandi.org/", "LRDataServiceSoap12");
    public final static QName LRDataServiceSoap = new QName("http://jamabandi.org/", "LRDataServiceSoap");
    public final static QName LRDataServiceHttpGet = new QName("http://jamabandi.org/", "LRDataServiceHttpGet");
    public final static QName LRDataServiceHttpPost = new QName("http://jamabandi.org/", "LRDataServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://164.100.137.207/lrdataservice/lrdataservice.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LRDataService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/d:/cache/lrdataservice.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LRDataService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LRDataService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LRDataService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public LRDataService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LRDataService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LRDataService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns LRDataServiceSoap
     */
    @WebEndpoint(name = "LRDataServiceSoap12")
    public LRDataServiceSoap getLRDataServiceSoap12() {
        return super.getPort(LRDataServiceSoap12, LRDataServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LRDataServiceSoap
     */
    @WebEndpoint(name = "LRDataServiceSoap12")
    public LRDataServiceSoap getLRDataServiceSoap12(WebServiceFeature... features) {
        return super.getPort(LRDataServiceSoap12, LRDataServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns LRDataServiceSoap
     */
    @WebEndpoint(name = "LRDataServiceSoap")
    public LRDataServiceSoap getLRDataServiceSoap() {
        return super.getPort(LRDataServiceSoap, LRDataServiceSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LRDataServiceSoap
     */
    @WebEndpoint(name = "LRDataServiceSoap")
    public LRDataServiceSoap getLRDataServiceSoap(WebServiceFeature... features) {
        return super.getPort(LRDataServiceSoap, LRDataServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns LRDataServiceHttpGet
     */
    @WebEndpoint(name = "LRDataServiceHttpGet")
    public LRDataServiceHttpGet getLRDataServiceHttpGet() {
        return super.getPort(LRDataServiceHttpGet, LRDataServiceHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LRDataServiceHttpGet
     */
    @WebEndpoint(name = "LRDataServiceHttpGet")
    public LRDataServiceHttpGet getLRDataServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(LRDataServiceHttpGet, LRDataServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns LRDataServiceHttpPost
     */
    @WebEndpoint(name = "LRDataServiceHttpPost")
    public LRDataServiceHttpPost getLRDataServiceHttpPost() {
        return super.getPort(LRDataServiceHttpPost, LRDataServiceHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LRDataServiceHttpPost
     */
    @WebEndpoint(name = "LRDataServiceHttpPost")
    public LRDataServiceHttpPost getLRDataServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(LRDataServiceHttpPost, LRDataServiceHttpPost.class, features);
    }

}
